@page "/register"
@inject IClient _client
@inject NavigationManager _manager

<PageTitle>Register</PageTitle>

<h3 class="mb-5">Register New Account</h3>

@if (string.IsNullOrEmpty(message) == false)
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}
<div>
    <EditForm Model="RegisterModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email" class="form-label">Email Address</label>
            <InputText class="form-control" @bind-Value="RegisterModel.Email" />
            <ValidationMessage For="@(() => RegisterModel.Email)" />
        </div>
        <br />
        <div class="form-group">
            <label for="firstName" class="form-label">First Name</label>
            <InputText class="form-control" @bind-Value="RegisterModel.FirstName" />
            <ValidationMessage For="@(() => RegisterModel.FirstName)" />
        </div>
        <br />
        <div class="form-group">
            <label for="lastName" class="form-label">Last Name</label>
            <InputText class="form-control" @bind-Value="RegisterModel.LastName" />
            <ValidationMessage For="@(() => RegisterModel.LastName)" />
        </div>
        <br />
        <div class="form-group">
            <label for="password" class="form-label">Password</label>
            <InputText class="form-control" type="password" @bind-Value="RegisterModel.Password" />
            <ValidationMessage For="@(() => RegisterModel.Password)" />
        </div>
        <br />
        <button type="submit" class="btn btn-outline-primary btn-block">Register</button>
    </EditForm>
</div>

@code {
    UserRegister RegisterModel = new UserRegister(){
        Role = "User"
    };

    string message = string.Empty;

    private async Task HandleRegistration()
    {
        try
        {
            await _client.RegisterAsync(RegisterModel);
            NavigateToLogin();
        }
        catch (ApiException ex)
        {
            if (ex.StatusCode >= 200 && ex.StatusCode <= 299)
            {
                NavigateToLogin();
            }

            message = ex.Response;
        }
    }

    private void NavigateToLogin() => _manager.NavigateTo("/login");
}
